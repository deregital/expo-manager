generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Cuenta {
  id               String       @id @default(uuid())
  nombreUsuario    String       @unique @map("nombre_usuario")
  contrasena       String
  esAdmin          Boolean      @default(false) @map("es_admin")
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  filtroBaseActivo Boolean      @default(false) @map("filtro_base_activo")
  fcmToken         String[]     @map("fcm_token")
  comentarios      Comentario[]
  etiquetas        Etiqueta[]   @relation("CUENTA_X_ETIQUETA")
  filtroBase       Etiqueta[]   @relation("FILTRO_BASE_X_ETIQUETA")
  comentarioResoluble ComentarioResoluble[]
  @@map("CUENTA")
}

model Perfil {
  id                  String       @id @default(uuid())
  telefono            String       @unique
  nombreCompleto      String       @map("nombre_completo")
  nombrePila          String?      @map("nombre_pila")
  genero              String?
  fotoUrl             String?      @map("foto_url")
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  idLegible           Int          @map("id_legible")
  fechaNacimiento     DateTime?    @map("fecha_nacimiento")
  dni                 String?
  instagram           String?
  mail                String?
  nombresAlternativos String[]     @map("nombres_alternativos")
  esPapelera          Boolean      @default(false)
  fechaPapelera       DateTime?    @map("fecha_papelera")
  telefonoSecundario  String?      @unique
  residencialatitud   Float?
  residencialongitud  Float?
  paisNacimiento      String?      @map("pais_nacimiento")
  provinciaNacimiento String?      @map("provincia_nacimiento")
  comentarios         Comentario[]
  mensajes            Mensaje[]    @relation("PERFIL_X_MENSAJE")
  residencia          Residencia?  @relation(fields: [residencialatitud, residencialongitud], references: [latitud, longitud])
  etiquetas           Etiqueta[]   @relation("PERFIL_X_ETIQUETA")

  @@map("PERFIL")
}

model Residencia {
  provincia  String
  localidad  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  latitud    Float
  longitud   Float
  perfiles   Perfil[]

  @@id([latitud, longitud])
  @@map("RESIDENCIA")
}

model Comentario {
  id         String   @id @default(uuid())
  contenido  String
  isSolvable Boolean @default(false) @map("is_solvable")
  perfilId   String   @map("perfil_id")
  creadoPor  String   @map("creado_por")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  cuenta     Cuenta   @relation(fields: [creadoPor], references: [id])
  perfil     Perfil   @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  comentarioResoluble ComentarioResoluble[]

  @@map("COMENTARIO")
}
model ComentarioResoluble {
  id        String @id @default(uuid())
  isSolved  Boolean @default(false)
  comentarioId String @map("comentario_id")
  comentarios Comentario @relation(fields: [comentarioId], references: [id])
  solvedBy    String? @map("solved_by")
  cuenta      Cuenta? @relation(fields: [solvedBy], references: [id])
  solvedAt    DateTime? @map("solved_at")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("COMENTARIO_RESOLUBLE")
}
model Etiqueta {
  id                 String        @id @default(uuid())
  nombre             String
  grupoId            String        @map("grupo_id")
  tipo               TipoEtiqueta  @default(PERSONAL)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  grupo              EtiquetaGrupo @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  eventosAsistidos   Evento[]      @relation("EVENTOASISTIDO_X_ETIQUETA")
  eventosConfirmados Evento[]      @relation("EVENTOCONFIRMADO_X_ETIQUETA")
  cuentas            Cuenta[]      @relation("CUENTA_X_ETIQUETA")
  cuentasFiltroBase  Cuenta[]      @relation("FILTRO_BASE_X_ETIQUETA")
  perfiles           Perfil[]      @relation("PERFIL_X_ETIQUETA")

  @@map("ETIQUETA")
}

model EtiquetaGrupo {
  id          String     @id @default(uuid())
  nombre      String
  color       String
  esExclusivo Boolean    @map("es_exclusivo")
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  etiquetas   Etiqueta[]

  @@map("GRUPO_ETIQUETA")
}

model EventosCarpeta {
  id         String   @id @default(uuid())
  nombre     String
  color      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  eventos    Evento[] @relation("CarpetaEventos_Eventos")

  @@map("EVENTOS_CARPETA")
}

model Evento {
  id                 String          @id @default(uuid())
  nombre             String
  fecha              DateTime
  ubicacion          String
  eventoPadreId      String?         @map("evento_padre")
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  etiquetaAsistioId  String          @map("etiqueta_asistio")
  etiquetaConfirmoId String          @map("etiqueta_confirmo")
  carpetaId          String?         @map("carpeta_id")
  carpeta            EventosCarpeta? @relation("CarpetaEventos_Eventos", fields: [carpetaId], references: [id], onDelete: Cascade)
  etiquetaAsistio    Etiqueta        @relation("EVENTOASISTIDO_X_ETIQUETA", fields: [etiquetaAsistioId], references: [id], onDelete: Cascade)
  etiquetaConfirmo   Etiqueta        @relation("EVENTOCONFIRMADO_X_ETIQUETA", fields: [etiquetaConfirmoId], references: [id], onDelete: Cascade)
  eventoPadre        Evento?         @relation("SubEventos", fields: [eventoPadreId], references: [id], onDelete: Cascade)
  subEventos         Evento[]        @relation("SubEventos")

  @@map("EVENTO")
}

model Mensaje {
  id             String        @id @default(uuid())
  wamId          String        @unique @map("wam_id")
  message        Json
  status         MensajeStatus @default(ENVIADO)
  perfilTelefono String        @map("perfil_telefono")
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  statusAt       DateTime?     @map("status_at")
  visto          Boolean       @default(false)
  perfil         Perfil        @relation("PERFIL_X_MENSAJE", fields: [perfilTelefono], references: [telefono], onDelete: Cascade)

  @@map("MENSAJE")
}

model Enums {
  id                 String             @id
  EstadoPlantilla    EstadoPlantilla
  CategoriaPlantilla CategoriaPlantilla
}

model RESPUESTAS_ENLATADAS {
  id          String   @id
  nombre      String
  descripcion String
  created_at  DateTime @default(now())
  updated_at  DateTime
}

enum EstadoPlantilla {
  APRROVED
  PENDING
  REJECTED
}

enum CategoriaPlantilla {
  MARKETING
  UTILITY
  AUTHENTICATION
}

enum TipoEtiqueta {
  PERSONAL
  EVENTO
  MODELO
  TENTATIVA
}

enum MensajeStatus {
  ENVIADO
  RECIBIDO
  LEIDO
}
